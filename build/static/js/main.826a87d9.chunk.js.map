{"version":3,"sources":["images/star-small.png","velocityinput/velocityinput.js","velocityslider/velocityslider.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","VelocityInput","props","type","max","min","value","onChange","e","velocityChange","ValueLabelComponent","children","open","Tooltip","enterTouchDelay","placement","title","VelocitySlider","Slider","aria-label","defaultValue","newValue","App","state","velocityValue","hueColor","backgroundColor","lightSpeed","yellowWavelength","velocityScale","velocity","minv","Math","log","scale","exp","temp","target","this","setState","normalScale","exponentialScale","updateColor","className","style","src","star","alt","onVelocityChange","red","green","blue","factor","wavelength","round","pow","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.826a87d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star-small.eba6df9e.png\";","import React from 'react';\nimport './velocityinput.css';\n\nexport function VelocityInput(props) {\n    return (\n        <label>\n            Velocity:\n            <input type=\"number\" max=\"100\" min=\"-1\" value={props.value} onChange={(e) => props.velocityChange(e)} />\n            km/s\n        </label>\n    );\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nfunction ValueLabelComponent(props) {\n    const { children, open, value } = props;\n    return (\n        <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\n            {children}\n        </Tooltip>\n    );\n}\n\nValueLabelComponent.propTypes = {\n    children: PropTypes.element.isRequired,\n    open: PropTypes.bool.isRequired,\n    value: PropTypes.number.isRequired\n};\n\n\nexport function VelocitySlider(props) {\n    return (\n        <div>\n            <Slider\n                ValueLabelComponent={ValueLabelComponent}\n                aria-label=\"custom thumb label\"\n                defaultValue={0}\n                max={100}\n                min={-100}\n                value={props.value}\n                onChange={(e, newValue) => props.velocityChange(newValue)}\n            />\n        </div>\n    );\n}","import React from 'react';\nimport './App.css';\nimport star from './images/star-small.png'\nimport { VelocityInput } from './velocityinput/velocityinput';\nimport { VelocitySlider } from './velocityslider/velocityslider';\n\nexport class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      velocityValue: 0,\n      hueColor: { backgroundColor: 'transparent' },\n      //asume default light speed is 300000 mk/s\n      lightSpeed: 300000,\n      //asume default yellow color wavelength is 580\n      //when velocity the original color of the star is yellow\n      yellowWavelength: 580,\n      velocityScale: 0\n    };\n  }\n\n  exponentialScale(velocity) {\n    let minp = 0;\n    let maxp = 100;\n    let minv = Math.log(1000);\n    let maxv = Math.log(130000);\n    let scale = (maxv - minv) / (maxp - minp);\n    return -Math.exp(minv + scale * (-velocity - minp));\n  }\n\n  normalScale(velocity) {\n    return velocity * 600;\n  }\n\n  onVelocityChange(velocity) {\n    let temp = velocity.target ? velocity.target.value : velocity;\n\n    //check if velocity out of range\n    if (temp > 100) {\n      temp = 100;\n    } else if (temp < -100) {\n      temp = -100;\n    }\n\n    //detect which way to scale\n    if (temp > 0 && temp <= 100) {\n      this.setState({ velocityValue: temp, velocityScale: this.normalScale(temp) });\n    } else if (temp <= -1 && temp >= -100) {\n      this.setState({ velocityValue: temp, velocityScale: this.exponentialScale(temp) });\n    } else {\n      this.setState({ velocityValue: 0, velocityScale: 0 });\n    }\n    //update img color\n    this.updateColor();\n  }\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <div className=\"Background\"></div>\n        <header className=\"App-header\">\n          <p>Doppler Effects</p>\n        </header>\n        <div className=\"content\">\n          <div className=\"img-container\">\n            <div className=\"img-cover\" style={this.state.hueColor} ></div>\n            <img src={star} alt=\"a star\" />\n          </div>\n          <div className=\"input-container\">\n            <VelocityInput value={this.state.velocityValue} velocityChange={(velocity) => this.onVelocityChange(velocity)}></VelocityInput>\n            <VelocitySlider value={this.state.velocityValue} velocityChange={(velocity) => this.onVelocityChange(velocity)}></VelocitySlider>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n\n  updateColor() {\n    if (this.state.velocityValue === 0) {\n      this.setState({ hueColor: { backgroundColor: 'transparent' } });\n    } else {\n      let wavelength = Math.round(this.state.yellowWavelength * this.state.lightSpeed / (this.state.lightSpeed - this.state.velocityScale));\n      let red, green, blue, factor;\n      const gamma = 0.8;\n      const intensity_max = 255;\n      if ((380 <= wavelength) && (wavelength <= 439)) {\n        red = -(wavelength - 440) / (440 - 380);\n        green = 0;\n        blue = 1;\n      }\n      else if ((440 <= wavelength) && (wavelength <= 489)) {\n        red = 0;\n        green = (wavelength - 440) / (490 - 440);\n        blue = 1;\n      }\n      else if ((490 <= wavelength) && (wavelength <= 509)) {\n        red = 0;\n        green = 1;\n        blue = -(wavelength - 510) / (510 - 490);\n      }\n      else if ((510 <= wavelength) && (wavelength <= 579)) {\n        red = (wavelength - 510) / (580 - 510);\n        green = 1;\n        blue = 0;\n      }\n      else if ((580 <= wavelength) && (wavelength <= 644)) {\n        red = 1;\n        green = -(wavelength - 645) / (645 - 580);\n        blue = 0;\n      }\n      else if ((645 <= wavelength) && (wavelength <= 725)) {\n        red = 1;\n        green = 0;\n        blue = 0;\n      }\n      if ((380 <= wavelength) && (wavelength <= 419)) {\n        factor = 0.3 + 0.7 * (wavelength - 380) / (420 - 380);\n      } else if ((420 <= wavelength) && (wavelength <= 644)) {\n        factor = 1;\n      } else if ((645 <= wavelength) && (wavelength <= 725)) {\n        factor = 0.3 + 0.7 * (725 - wavelength) / (725 - 700);\n      } else {\n        factor = 0;\n      }\n      red = red === 0 ? red : Math.round(intensity_max * Math.pow(red * factor, gamma));\n      green = green === 0 ? green : Math.round(intensity_max * Math.pow(green * factor, gamma));\n      blue = blue === 0 ? blue : Math.round(intensity_max * Math.pow(blue * factor, gamma));\n      this.setState({ hueColor: { backgroundColor: 'rgb(' + red + ', ' + green + ', ' + blue + ')' } });\n    }\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}